diff --git a/inittab b/inittab
index ba6fe79..ccd9c89 100644
--- a/inittab
+++ b/inittab
@@ -31,7 +31,10 @@ si:S:sysinit:/etc/rc.d/rc.S
 su:1S:wait:/etc/rc.d/rc.K
 
 # Script to run when going multi user.
-rc:2345:wait:/etc/rc.d/rc.M
+rc:34:wait:/etc/rc.d/rc.M
+
+l2:2:wait:/etc/rc.d/rc.2
+l5:5:wait:/etc/rc.d/rc.5
 
 # What to do at the "Three Finger Salute".
 ca::ctrlaltdel:/sbin/shutdown -t5 -r now
diff --git a/rc.d/rc.2 b/rc.d/rc.2
new file mode 100755
index 0000000..39e3091
--- /dev/null
+++ b/rc.d/rc.2
@@ -0,0 +1,12 @@
+#! /bin/bash
+#
+# rc.2		This file is executed by init(8) when the system is being
+#		initialized for run level 2 (dummy)
+#
+# Author:	pyllyukko, <pyllyukko@maimed.org>
+#
+
+# If there are SystemV init scripts for this runlevel, run them.
+if [ -x /etc/rc.d/rc.sysvinit ]; then
+  . /etc/rc.d/rc.sysvinit
+fi
diff --git a/rc.d/rc.5 b/rc.d/rc.5
new file mode 100755
index 0000000..0cadc57
--- /dev/null
+++ b/rc.d/rc.5
@@ -0,0 +1,120 @@
+#! /bin/bash
+#
+# rc.5		This file is executed by init(8) when the system is being
+#		initialized for run level 5 (wipe)
+#
+# Author:	pyllyukko, <pyllyukko@maimed.org>
+#
+
+umask 077
+PATH=/bin:/sbin:/usr/bin:/usr/sbin
+export PATH
+
+echo
+echo "**********************************************"
+echo "*** WARNING!!! Entering runlevel 5 (armed) ***"
+echo "**********************************************"
+echo
+
+# If there are SystemV init scripts for this runlevel, run them.
+if [ -x /etc/rc.d/rc.sysvinit ]; then
+  . /etc/rc.d/rc.sysvinit
+fi
+
+backup_dir=/usr/local/var/backups
+
+function get_luks_partitions()
+{
+  # TODO: disk/by-uuid
+  if [ ! -f /proc/partitions ]
+  then
+    echo "error: file \`/proc/partitions' not found!" 1>&2
+    return 1
+  fi
+  # get the partitions to an array, the NR>2 makes it to skip the blank line.
+  local DEVICES="$(awk 'NR>2{printf "/dev/%s\n",$4}' /proc/partitions)"
+  local DEVICE
+  local luks_found=0
+
+  for DEVICE in ${DEVICES}
+  do
+    # check if it's a block device
+    if [ ! -b "${DEVICE}" ]
+    then
+      continue
+    fi
+    /usr/sbin/cryptsetup isLuks "${DEVICE}" && {
+      echo "${DEVICE}"
+      luks_found=1
+    }
+  done
+
+  return
+}
+
+# sanity checks
+if [ ! -x /usr/sbin/cryptsetup ]
+then
+  echo "error: cryptsetup not found!" 1>&2
+  exit 1
+fi
+
+if [ ! -d "${backup_dir}" ]
+then
+  mkdir -pv "${backup_dir}"
+fi
+
+if [ ! -x /etc/rc.d/rc.sysvinit ]
+then
+  echo
+  echo "*************************************************************"
+  echo "*** WARNING!!! /etc/rc.d/rc.sysvinit not executable!      ***"
+  echo "***            Recovering from this runlevel requires it. ***"
+  echo "***            Do you have sysvinit-functions pkg?        ***"
+  echo "*************************************************************"
+  echo
+fi
+
+if [ ! -x /etc/rc.d/rc5.d/KluksHeaderRestore.sh ]
+then
+  echo
+  echo "*******************************************************************"
+  echo "*** WARNING!!! /etc/rc.d/rc5.d/KluksHeaderRestore.sh not found! ***"
+  echo "***            You are not able to restore automatically from   ***"
+  echo "***            this runlevel.                                   ***"
+  echo "*******************************************************************"
+  echo
+fi
+
+luks_devices=( $( get_luks_partitions ) )
+
+for luks_device in ${luks_devices[*]}
+do
+  /usr/sbin/cryptsetup luksHeaderBackup "${luks_device}" --header-backup-file "${backup_dir}/luks-${luks_device##*/}"
+  cryptsetup_ret=${?}
+  echo "cryptsetup returned ${cryptsetup_ret}"
+
+  # verify that the backup succeeded
+  if [ ${cryptsetup_ret} -ne 0 -o \
+       ! -s "${backup_dir}/luks-${luks_device##*/}" ]
+  then
+    echo
+    echo "*********************************************"
+    echo "*** WARNING!!! LUKS header backup failed! ***"
+    echo "*********************************************"
+    echo
+  fi
+
+  # wipe all the 8 key slots
+  for I in {0..7}
+  do
+    /usr/sbin/cryptsetup -q luksKillSlot "${luks_device}" ${I}
+    cryptsetup_ret=${?}
+    if [ ${cryptsetup_ret} -eq 0 ]
+    then
+      echo "Key ${I} wiped."
+    fi
+  done
+
+  /usr/sbin/cryptsetup luksDump "${luks_device}" | grep "^Key Slot"
+done
diff --git a/rc.d/rc2.d/KluksHeaderRestore.sh b/rc.d/rc2.d/KluksHeaderRestore.sh
new file mode 100755
index 0000000..25c4199
--- /dev/null
+++ b/rc.d/rc2.d/KluksHeaderRestore.sh
@@ -0,0 +1,92 @@
+#!/bin/bash
+
+# this script is run when we're changing runlevel away from rl 5.
+# if we're going for poweroff or reboot, the LUKS headers and backups are also wiped. if we're returning to a "normal" runlevel, the headers (and keys) are restored and the backups removed.
+
+function get_luks_partitions()
+{
+  # TODO: disk/by-uuid
+  if [ ! -f /proc/partitions ]
+  then
+    echo "error: file \`/proc/partitions' not found!" 1>&2
+    return 1
+  fi
+  # get the partitions to an array, the NR>2 makes it to skip the blank line.
+  local DEVICES="$(awk 'NR>2{printf "/dev/%s\n",$4}' /proc/partitions)"
+  local DEVICE
+  local luks_found=0
+
+  for DEVICE in ${DEVICES}
+  do
+    # check if it's a block device
+    if [ ! -b "${DEVICE}" ]
+    then
+      continue
+    fi
+    /usr/sbin/cryptsetup isLuks "${DEVICE}" && {
+      echo "${DEVICE}"
+      luks_found=1
+    }
+  done
+
+  return
+}
+
+backup_dir=/usr/local/var/backups
+SECTOR_SIZE=512
+
+echo "rc5.d/K script"
+
+if [ ! -x /usr/sbin/cryptsetup ]
+then
+  echo "error: cryptsetup not found!" 1>&2
+  exit 1
+fi
+
+#echo "DEBUG: runlevel=${runlevel} prevlevel=${prevlevel}"
+luks_devices=( $( get_luks_partitions ) )
+if [ "${runlevel}" != "0" -a "${runlevel}" != "6" ]
+then
+  for luks_device in ${luks_devices[*]}
+  do
+    if [ ! -f "${backup_dir}/luks-${luks_device##*/}" ]
+    then
+      echo "ERROR: LUKS header backup not found!" 1>&2
+      continue
+    fi
+
+    /usr/sbin/cryptsetup -q luksHeaderRestore "${luks_device}" --header-backup-file "${backup_dir}/luks-${luks_device##*/}"
+    cryptsetup_ret=${?}
+    echo "cryptsetup returned ${cryptsetup_ret}"
+
+    echo -n "Shredding LUKS header backups: "
+    /usr/bin/shred -u "${backup_dir}/luks-${luks_device##*/}" 
+    if [ ${?} -eq 0 ]
+    then
+      echo "ok"
+    else
+      echo "FAILED!"
+    fi
+    /usr/sbin/cryptsetup luksDump "${luks_device}" | grep "^Key Slot"
+  done
+else # poweroff or reboot runlevel -> LUKS keys == gone!
+
+  echo -n "Shredding LUKS header backups: "
+  /usr/bin/shred -u "${backup_dir}/luks-"* 
+
+  set -x
+  for luks_device in ${luks_devices[*]}
+  do
+    # we could also try stat -c %s <luksbackup> to get the header size
+    PAYLOAD_OFFSET=$( /usr/sbin/cryptsetup luksDump "${luks_device}" | awk '/^Payload offset/{print$3}' )
+    if [[ ${SECTOR_SIZE} =~ ^[0-9]+$ && ${PAYLOAD_OFFSET} =~ ^[0-9]+$ ]]
+    then
+      dd if=/dev/urandom of="${luks_device}" bs=${SECTOR_SIZE} count=${PAYLOAD_OFFSET}
+    fi
+  done
+  echo
+  echo "******************"
+  echo "*** BYE BYE!!! ***"
+  echo "******************"
+  echo
+fi
