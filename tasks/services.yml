---
# Unwanted services
- name: Stop & disable unwanted services (Debian)
  become: yes
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ debian_services }}"
  failed_when:
    - result.failed == true
    - '"Could not find the requested service" not in result.msg'
  register: result
  tags:
  - services
  - debian

- name: Slackware services
  become: yes
  when: ansible_distribution == "Slackware"
  tags:
  - services
  - slackware
  block:
  - name: Stop unwanted services (Slackware)
    ignore_errors: yes
    command: /bin/sh /etc/rc.d/rc.{{ item }} stop
    with_items: "{{ slackware_services }}"
  - name: Disable unwanted services (Slackware)
    file:
      path: "/etc/rc.d/rc.{{ item }}"
      owner: root
      group: root
      mode: ugo-x
    with_items: "{{ slackware_services }}"
    register: result
    failed_when:
      - result.failed == true
      - result.state != "absent"
    tags: permissions

# Cron
# CIS Debian Linux 10 Benchmark v1.0.0 - 5.1.8 Ensure at/cron is restricted to authorized users
- name: Debian cron & at
  become: yes
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  tags:
  - services
  - configuration
  - debian
  - authorization
  block:
  - name: Restrict cron (cron.allow)
    become: yes
    file:
      path: /etc/cron.allow
      state: touch
      owner: root
      group: crontab
      mode: '0640'
    tags: permissions
  - name: Restrict at (at.allow)
    become: yes
    file:
      path: /etc/at.allow
      state: touch
      owner: root
      group: daemon
      mode: '0640'
    tags: permissions
  - name: Restrict cron & at ({at,cron}.deny)
    become: yes
    file:
      path: /etc/{{ item }}
      state: absent
    with_items:
      - cron.deny
      - at.deny

- name: Create a job that checks systemd's state
  become: yes
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux" or ansible_os_family == "RedHat"
  cron:
    name: "Check SystemState"
    job: "/bin/systemctl show --property=SystemState | /bin/grep -v '^SystemState=running$'"
    minute: "*/5"
    state: present
  tags:
  - debian
  - centos
- name: Slackware's cron
  tags: slackware
  block:
  - name: Increase crond's log level (Slackware)
    replace:
      path: /etc/default/crond
      regexp: '^(CROND_OPTS=".*)-l [a-z]+(.*")$'
      replace: '\g<1>-l info\g<2>'
      validate: '/bin/grep "^CROND_OPTS=\".*-l info.*\"$" %s'
    tags:
    - services
    - logging
  # From dcron's README
  - name: Restrict cron (Slackware)
    file:
      path: /usr/bin/crontab
      group: wheel
      mode: '4710'
    tags:
    - permissions
    - services
    - authorization
  - name: Set permissions for /var/spool/cron
    file:
      path: /var/spool/cron
      owner: root
      group: root
      mode: '0700'
    tags:
    - permissions
    - services
  - name: Set permissions for /var/spool/cron/crontabs
    file:
      path: /var/spool/cron/crontabs
      owner: root
      group: root
      mode: '0700'
    tags:
    - permissions
    - services
  # user needs to have x perms into the directory where the temp file is created
  # Slackware 14.2 has /var/spool/cron as TMPDIR and 14.2+ has /run/cron
  - name: Fix /etc/rc.d/rc.crond
    blockinfile:
      path: /etc/rc.d/rc.crond
      insertafter: "^ {4}mkdir -p /run/cron$"
      block: |
        /bin/chgrp wheel /run/cron
        /bin/chmod 0710 /run/cron
    tags: services
  # From dcron's README
  - name: chmod crond (Slackware)
    file:
      path: /usr/sbin/crond
      mode: '0700'
    tags:
    - permissions
    - services
  when: ansible_distribution == "Slackware"
  become: yes
# </Cron>

# SSH
- name: Check SSH daemon service state
  service_facts:
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  tags:
  - services
  - ssh
  - debian
- name: Stat /etc/krb5.keytab
  stat:
    path: /etc/krb5.keytab
  register: stat_keytab
  tags: ssh
- name: Harden SSH daemon configuration
  template:
    src: "{{ playbook_dir }}/templates/sshd_config-{{ ansible_distribution }}.j2"
    dest: /etc/ssh/sshd_config
    validate: /usr/sbin/sshd -t -f %s
  register: result
  # sshd validation fails when the hostkeys do not exist
  failed_when:
    - result.failed == true
    - '"sshd: no hostkeys available -- exiting." not in result.stderr'
  tags:
  - services
  - configuration
  - ssh
  notify:
    - "Restart sshd (Slackware)"
    - "Restart sshd (Debian)"
  become: yes
  # Skip the task in Debian if ssh.service does not exist
  when: >
    ((ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux") and ansible_facts.services.ssh is defined) or
    ansible_distribution == "Slackware"
- name: Harden SSH client configuration
  tags:
  - configuration
  - slackware
  - ssh
  become: yes
  when: ansible_distribution == "Slackware"
  template:
    src: "{{ playbook_dir }}/templates/ssh_config-{{ ansible_distribution }}.j2"
    dest: /etc/ssh/ssh_config
    owner: root
    group: root
    mode: '0644'
# </SSH>

# Misc
#- name: Install icmpinfo
#  become: yes
#  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
#  apt:
#    name: icmpinfo
#    update_cache: yes
#  tags:
#  - packages
- name: Install icmpinfo (Slackware)
  become: yes
  when: ansible_distribution == "Slackware"
  slackpkg:
    name: icmpinfo
    state: present
  tags:
  - packages
  - services
  - slackware
- name: Slackware rc.d
  tags: slackware
  block:
  - name: Create /etc/rc.d/rc.local (Slackware)
    copy:
      src: "{{ playbook_dir }}/newconfs/rc.d/rc.local.new"
      dest: /etc/rc.d/rc.local
      owner: root
      group: root
      mode: '0700'
    tags: services
  - name: Create /etc/rc.d/rc.local_shutdown symlink (Slackware)
    file:
      src: /etc/rc.d/rc.local
      dest: /etc/rc.d/rc.local_shutdown
      owner: root
      group: root
      state: link
    tags: services
  - name: Enable smartd (Slackware)
    file:
      path: /etc/rc.d/rc.smartd
      owner: root
      group: root
      mode: '0700'
    register: result
    failed_when:
      - result.failed == true
      - result.state != "absent"
    tags: services
  - name: Disable atd (Slackware)
    replace:
      path: /etc/rc.d/rc.M
      after: '# Start atd \(manages jobs scheduled with ''at''\):'
      before: '# Slackware-Mini-Quota-HOWTO:'
      regexp: '^#?(.+)$'
      replace: '#\g<1>'
    tags: services
  - name: NFSv4 support in rc.inet2
    blockinfile:
      path: /etc/rc.d/rc.inet2
      insertbefore: "^# If /etc/rc.d/rc.rpc is executable, run it to load rpc.portmap, rpc.lockd,$"
      block: |
        # Mount remote (NFSv4) filesystems:
        if cat /etc/fstab | grep -v '^#' | grep -w nfs4 1> /dev/null 2> /dev/null ; then
          # Check if we have Kerberos keytab
          if [ -f /etc/krb5.keytab -a -x /usr/sbin/rpc.gssd ]
          then
            if ! ps axc | grep -q rpc.gssd ; then
              echo "Starting RPCSEC_GSS daemon:  /usr/sbin/rpc.gssd"
              /usr/sbin/rpc.gssd
            fi
          fi
          echo "Mounting remote (NFSv4) file systems:  /sbin/mount -a -t nfs4"
          /sbin/mount -a -t nfs4
          /sbin/mount -v -t nfs4
        fi
    tags: services
  when: ansible_distribution == "Slackware"
  become: yes
